/**\n * simulatedArbitrage.test.ts\n * \n * Unit tests for the simulated arbitrage functionality\n */\n\nimport { MockDatabase } from \"../database/MockDatabase\";\n\n// Mock the logger to prevent console output during tests\njest.mock(\"../utils/logger\", () => ({\n  Logger: {\n    getInstance: jest.fn().mockReturnValue({\n      info: jest.fn(),\n      error: jest.fn(),\n      warn: jest.fn(),\n      debug: jest.fn()\n    })\n  }\n}));\n\ndescribe(\"Simulated Arbitrage\", () => {\n  let mockDb: MockDatabase;\n  \n  beforeEach(() => {\n    mockDb = new MockDatabase();\n  });\n  \n  test(\"MockDatabase should initialize correctly\", async () => {\n    await mockDb.connect();\n    expect(mockDb).toBeDefined();\n  });\n  \n  test(\"MockDatabase should store and retrieve arbitrage opportunities\", async () => {\n    await mockDb.connect();\n    \n    const testOpportunity = {\n      fromToken: \"SUI\",\n      toToken: \"USDC\",\n      amount: 1000,\n      profit: 5.25,\n      profitPercentage: 0.525,\n      route: \"DEX_A -> DEX_B\",\n      timestamp: new Date().toISOString()\n    };\n    \n    await mockDb.addArbitrageOpportunity(testOpportunity);\n    \n    const opportunities = await mockDb.getMockData(\"arbitrageOpportunities\");\n    expect(opportunities).toHaveLength(1);\n    expect(opportunities[0].fromToken).toBe(\"SUI\");\n    expect(opportunities[0].toToken).toBe(\"USDC\");\n    expect(opportunities[0].profit).toBe(5.25);\n  });\n  \n  test(\"MockDatabase should handle token queries\", async () => {\n    await mockDb.connect();\n    \n    const suiToken = await mockDb.getTokenBySymbol(\"SUI\");\n    expect(suiToken).toBeDefined();\n    expect(suiToken.symbol).toBe(\"SUI\");\n    \n    const usdcToken = await mockDb.getTokenBySymbol(\"USDC\");\n    expect(usdcToken).toBeDefined();\n    expect(usdcToken.symbol).toBe(\"USDC\");\n    \n    const nonExistentToken = await mockDb.getTokenBySymbol(\"NONEXISTENT\");\n    expect(nonExistentToken).toBeNull();\n  });\n  \n  test(\"MockDatabase should handle pool queries\", async () => {\n    await mockDb.connect();\n    \n    const tokenPairs = await mockDb.getTokenPairs();\n    expect(tokenPairs).toBeDefined();\n    expect(tokenPairs.length).toBeGreaterThan(0);\n    \n    // Check if SUI-USDC pair exists\n    const suiUsdcPair = tokenPairs.find(\n      pair => \n        (pair.tokenA.includes(\"sui\") && pair.tokenB.includes(\"coin\")) || \n        (pair.tokenB.includes(\"sui\") && pair.tokenA.includes(\"coin\"))\n    );\n    \n    expect(suiUsdcPair).toBeDefined();\n  });\n  \n  afterEach(async () => {\n    await mockDb.disconnect();\n  });\n});
